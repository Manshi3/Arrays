BRUTE
	- we want to find 3 integers, so we run 3 loops
	- we make set in the starting as it stores in unique only
	- once we find integers equal to 0, we make temp, we put elements in it.
	- we sort it, then put all of it in set
	- later we put them in ans list and return
	
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        // brute
        int n = nums.size();
        set<vector<int>> st;
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                for(int k = j + 1; k < n; k++) { 
                    if(nums[i] + nums[j] + nums[k] == 0) {
                        vector<int> temp = {nums[i], nums[j], nums[k]};
                        sort(temp.begin(), temp.end());
                        st.insert(temp);
                    }
                }
            }
        }
        vector<vector<int>> ans(st.begin(), st.end());
        return ans;
    }
};

TC - O(n^3) + O(log no. of unique elements)
SC - O(no. of triplets in sets) + O(no. of triplets in sets in ans) = O(2 * no.oftriplets)

BETTER
	- Hashing, we have to reduse the tc so what we have to do is
	- we have to look for -(num[i]+num[j])
	- for that looking, we'll use hashmap
	- but we cannot blindly put everything inside hashmap because we want unique numbers.
	- aisa bhi ho skta hai jo number ham use kr rhe hai, vhi find out krne aa gya formule ke wjh se and vhi return krdiya phir to galat ho jaega
	- issliye i j rhega, formula legga, find krenge vo num, nhi mila to j inc krenge and i and j ke bivh wala number hashmap me daal denge
	
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        set<vector<int>> st;
        for(int i = 0; i < n; i++) {
            set<int> hashset;
            for(int j = i + 1; j < n; j++) {
                int k = -(nums[i] + nums[j]);
                if(hashset.find(k) != hashset.end()) {
                    vector<int> temp = {nums[i], nums[j], k};
                    sort(temp.begin(), temp.end());
                    st.insert(temp);
                }
                hashset.insert(nums[j]);
            }
        }
        vector<vector<int>> ans(st.begin(), st.end());
        return ans;
    }
};

TC - O(n^2) + O(logm)
SC - O(n) + O(2 triplets in list of list)

OPTIMAL
	- sort, 2 pointers

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> ans;
        int n = nums.size();
        for(int i = 0; i < n; i++) {
            if(i > 0 && nums[i] == nums[i - 1]) continue; 
            int j = i + 1;
            int k = n - 1;
            while(j < k) {
                int sum = nums[i] + nums[j] + nums[k];
                if(sum < 0) j++;
                else if(sum > 0) k--;
                else {
                    vector<int> temp = {nums[i], nums[j], nums[k]};
                    ans.push_back(temp);
                    j++, k--;
                    while(j < k && nums[j] == nums[j-1]) j++;
                    while(j < k && nums[k] == nums[k+1]) k--;
                }
            }
        }
        return ans;
    }
};

TC - O(nlogn) to sort
	 O(n^2) for two loops
SC - O(ans) for returning
