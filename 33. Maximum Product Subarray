BRUTE -
 
  - good ol 3 loops
  
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int maxi = INT_MIN;
        for(int i = 0; i < nums.size(); i++) {
            for(int j = i; j < nums.size(); j++) {
                int product = 1;
                for(int k = i; k < j; k++) {
                    product *= nums[k];
                }
                maxi = max(maxi, product);
            } 
        }
        return maxi;
    }
};

TC - O(n^3)
SC - O(1)

OPTIMAL 

  easy peasy
  
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();

        int prefix = 1;
        int suffix = 1;
        int maxi = INT_MIN;

        for(int i = 0; i < n; i++) {
            if(prefix == 0) prefix = 1;
            if(suffix == 0) suffix = 1;

            prefix *= nums[i];
            suffix *= nums[n - i - 1];
            maxi = max(maxi, max(prefix, suffix));
        }
        return maxi;
    }
};

TC - O(n)
SC - O(1)
