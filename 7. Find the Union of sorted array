BRUTE

	- we see we want unique elements, the first thing that comes in mind for brute is set.
	- we put elemenets from both array into set
	- there will be unique elements, we put them in temp and return temp
	
#include <bits/stdc++.h>

vector<int>sortedArray(vector<int> a, vector<int> b) {
    int n = a.size(), m = b.size();

    set<int> st;
    for(int i = 0; i < n; i++) st.insert(a[i]);
    for(int i = 0; i < m; i++) st.insert(b[i]);
    vector<int> temp;
    for(auto it : st) {
        temp.push_back(it);
    }
    return temp;
}

TC - O(n1logn) for set for a 
	+ O(n2logn) for set for b
	+ O(n1+n2) for temp
SC - O(n1+n2) for set of two arrays
	+ O(n1+n2) for returning 
	
OPTIMAL

	- 2 pointers

#include <bits/stdc++.h>

vector < int > sortedArray(vector < int > a, vector < int > b) {
    int n = a.size(), m = b.size();
    vector<int> temp;
    int i = 0, j = 0;
    while(i < n && j < m) {
        if(a[i] <= b[i]) {
            if(temp.size() == 0 || temp.back() != a[i]) {
                temp.push_back(a[i]);
            }
            i++;
        }
        else {
            if(temp.size() == 0 || temp.back() != b[j]) {
                temp.push_back(b[j]);
            }
            j++;
        }
    }
    while (j < m) {
        if(temp.back() != b[j]) {
            temp.push_back(b[j]);
        }
        j++;
    }
    while (i < n) {
        if(temp.back() != a[i]) {
            temp.push_back(a[i]);
        }
        i++;
    }
    return temp;
}

TC - O(n + m)
SC - O(n + m) for returning
