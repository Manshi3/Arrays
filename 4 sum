BRUTE
  - 4 loops
 class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        set<vector<int>> st;
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                for(int k = j + 1; j < n; k++) {
                    for(int l = k + 1; k < n; l++) {
                        long long sum = nums[i] + nums[j];
                        sum += nums[k];
                        sum += nums[l];
                        if(sum == target) {
                            vector<int> temp = {nums[i], nums[j], nums[k], nums[l]};
                            sort(temp.begin(), temp.end());
                            st.insert(temp);
                        }
                    }
                }
            }
        }
        vector<vector<int>> ans(st.begin(), st.end());
        return ans;
    }
};
TC - O(n^4) for loops
SC - O(2 * no. of quads)

BETTER 
    - hashmap

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        set<vector<int>> st;
        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++) {
                set<int> hashset;
                for(int k = j + 1; k < n; k++) {
                    int sum = nums[i] + nums[j];
                    sum += nums[k];
                    int forth = target - sum;
                    if(hashset.find(forth) != hashset.end()) {
                        vector<int> temp = {nums[i], nums[j], nums[k], forth};
                        sort(temp.begin(), temp.end());
                        st.insert(temp);
                    }
                    hashset.insert(nums[k]);
                }
            }
        }
        vector<vector<int>> ans(st.begin(), st.end());
        return ans;
    }
};

TC - O(n^3 + logm)
SC - O(n) + O(2 * quads)

OPTIMAL
    - 2 pointer
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        vector<vector<int>> ans;
        for(int i = 0; i < n; i++) {
            if(i > 0 && nums[i] == nums[i - 1]) continue;
            for(int j = i + 1; j < n; j++) {
                if(j != i+1 && nums[j] == nums[j - 1]) continue;
                int k = j + 1;
                int l = n - 1;
                while(k < l) {
                    long long sum = nums[i];
                    sum += nums[j];
                    sum += nums[k];
                    sum += nums[l];
                    if(sum < target) k++;
                    else if(sum > target) l--;
                    else {
                        vector<int> temp = {nums[i], nums[j], nums[k], nums[l]};
                        ans.push_back(temp);
                        k++, l--; 
                        while(k < l && nums[k] == nums[k-1]) k++;
                        while(k < l && nums[l] == nums[l+1]) l--; 
                    } 
                }
            }
        }
        return ans;
    }
};

TC - O(n^3) three loops
SC - O(ans) returning
