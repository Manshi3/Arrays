BRUTE - 

	- we iterate through the matrix, if 0 found, we mark it's corresponding elements as -1.
	- we iterate again through matrix and whereever there's -1, we mark it as 0 then.
	- to mark rows from 0 to -1, we have separate loop.
	- to mark cols from 0 to -1, we have separate loop.
	
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        void markrows(vector<vector<int>> &matrix, int n, int m, int i) {
            for(int j = 0; j < n; j++) {
                if(matrix[i][j] != 0) matrix[i][j] = -1;
            }
        }
        void markcols(vector<vector<int>> &matrix, int n, int m, int j) {
            for(int i = 0; i < m; i++) {
                if(matrix[i][j] != 0) matrix[i][j] = -1;
            }
        }
        void setZeroes(vector<vector<int>>& matrix) {
            int n = matrix.size();
            int m = matrix[0].size();
            // set 1 as -1
            for(int i = 0; i < n; i++) {
                for(int j = 0; j < m; j++) {
                    if(matrix[i][j] == 0) {
                        markrows(matrix, n, m, i);
                        markcols(matrix, n, m, j);
                    }
                }
            }

            // set -1 as 0
            for(int i = 0; i < n; i++) {
                for(int j = 0; j < m; j++) {
                    if(matrix[i][j] == -1) {
                        matrix[i][j] = 0;
                    }
                }
            }
        }   
    }
};

TC - O((n*m) * (n+m) + (n*m)) = (N*M)^3
SC - O(1)

BETTER - 

	- made two rows and cols of row size and col size resp assign 0.
	- iterate the matrix, if 0 found, update the row and col with 1. keep doing this.
	- iterate again in the matrix, if row or col is 1, update the matrix row and col with 0.
	
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        vector<int> row(n,0);
        vector<int> col(m,0);

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(matrix[i][j] == 0) {
                    row[i] = 1, col[j] = 1;
                }
            }
        }

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(row[i] == 1 || col[j] == 1) {
                    matrix[i][j] = 0;
                }
            }
        }
    }
};
TC - O(2*n*m)
SC - O(n) + O(m)

OPTIMAL - 

	- Since we were taking a lot of space in previous approach. we'll make row and col inside the matrix only.
	- we can do that but matrix[0][0] will have both col and row collide. so we'll take row0 for first index of matrix.
	- now same as prev
	
class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();

        int row0 = 1;

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                if(matrix[i][j] == 0) {
                    if(j != 0) matrix[0][j] = 0;
                    else row0 = 0;
                    matrix[i][0] = 0;
                }
            }
        }

        for(int i = 1; i < n; i++) {
            for(int j = 1; j < m; j++) {
                if(matrix[0][j] == 0 || matrix[i][0] == 0) matrix[i][j] = 0;
            }
        }

        if(matrix[0][0] == 0) for(int j = 0; j < m; j++) matrix[0][j] = 0;
        if(row0 == 0) for(int i = 0; i < n; i++) matrix[i][0] = 0;
    }
};

TC - O(2 * n * m)
SC - O(1)
