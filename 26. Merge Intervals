Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals 
that cover all the intervals in the input.

BRUTE 
  - so we're given intervals, hme combine krke return krna hai
  - Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
    Output: [[1,6],[8,10],[15,18]]
  - sort
  - input ke phle walo ko ans maanenge and aage chlte compare krenge kon smol kon nhi
  - next interval ke first wale ko cmopare krenge pichle wale end se, agr smol hai to mtlb overlap kr rhe
  
class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> ans;
        for(int i = 0; i < n; i++) {
            int start = intervals[i][0];
            int end = intervals[i][1];
            if(!intervals.empty() && end <= ans.back()[1]) continue; // iska mtlb hai ki ans has (1,6) and youre currently at (2,4) which is already there. continue. 
            for(int j = i + 1; j < n; j++) {
                if(intervals[j][0] <= end) {
                    end = max(end, intervals[j][1]);
                } else {
                    break;  // hmara interval bnate wakt ek element pe aagye hai jo bda hai kaafi, interval nhi ban skta. we break. we start from i+1 loop.
                }
            }
            ans.push_back({start, end});
        }
        return ans;
    }
};

TC - O(nlogn) for sorting + O(2n) for going through every element twice = 
    O(nlogn) + O(2n)
SC - O(n) for storing all n char in ans

OPTIMAL

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        int n = intervals.size();
        sort(intervals.begin(), intervals.end());
        vector<vector<int>> ans;
        for(int i = 0; i < n; i++) {
            if(intervals.empty() || intervals[i][0] > ans.back()[1]) {    // new interval tabhi bnega na jab interval ham start hi kr rhe hai ya jab curr element ans ke back wale se bda hai, mtlb current element is bigger than what we had until now
                ans.push_back(intervals[i]);
            }
            else {
                ans.back()[1] = max(ans.back()[1], intervals[i][1]);    // new interval bnane ki zarurat nhi hai, jis elemnt pe hai ham, vo chota hai pichle wale se to ham bas merge kr denge
            }
        }
        return ans;
    }
};

TC - O(nlogn) + O(n)
SC - O(n)
   - 
