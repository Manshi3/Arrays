BRUTE - 

	- put all the non zero elements into temp. 
	- put those temp elements back to array
	- put 0 in the left spaces

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        // brute
        int n = nums.size();

        // first step
        vector<int> temp;
        for(int i = 0 ; i < n; i++) {
            if(nums[i] != 0) temp.push_back(nums[i]);
        }
        
        // second step
        int nz = temp.size();
        for(int i = 0; i < nz; i++) {
            nums[i] = temp[i];
        }

        // third step
        for(int i = nz; i < n; i++) {
            nums[i] = 0;
        }
    }
};

TC - O(2n)
SC - O(n)

OPTIMAL

	- 2 pointer
	- first find 0, keep j there. 
	- keep i above i, if it is non zero element, swap with j
	
class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int n = nums.size();
        int j = -1;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                j = i;
                break;
            }
        }

        for(int i = j+1; i < n; i++) {
            if(nums[i] != 0) {
                swap(nums[i], nums[j]);
                j++;
            }
        }
    }
};

TC - O(n)
SC - O(1)

ANOTHER OPTIMAL

class Solution {
public:
    void moveZeroes(vector<int>& nums) {
    int last = 0, cur = 0;
    
    while(cur < nums.size()) {
        if(nums[cur] != 0) {
            swap(nums[last], nums[cur]);
            last++;
        }
        
        cur++;
    }
}
};

TC - O(n)
SC - O(1)
