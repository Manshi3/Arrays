BRUTE -
    - we make a list/vector. we iterate.
	- if the size of vector is 0 or if 0th index of vector is not equal to array's current index - we make cnt and iterate again.
	- we check if the elements are equal or no, if yes, we inc cnt.
	- later we check if cnt is bigger than n/3 or no, if yes, push_back all thse element in vector
	- later we also check if the size of vector is equal to 2, we break it cus we dont need more than that
	
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        vector<int> ls;
        for(int i = 0; i < n; i++) {
            if(ls.size() == 0 || ls[0] != nums[i]) {
                int cnt = 0;
                for(int j = 0; j < n; j++) {
                    if(nums[i] == nums[j]) {
                        cnt++;
                    }
                }
                if(cnt > n/3) ls.push_back(nums[i]);
            }
            if(ls.size() == 2) break;
        }
        return ls;
    }
};

TC - O(n^2)
SC - O(1)

BETTER-
	- obv we'll use hashmap.
	- we'll make a vector to return, mini which is (int)(n/3) + 1.
	- we'll iterate, pust every element inside map. there, we'll check if map has size equal to mini, if yes, push back all those in vector.
	- we'll check if size of vector if 2, if yes, break cus we more than that is not possible.
	- return vector;
	
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        vector<int> ls;
        map<int, int> mpp;
        int mini = (int)(n/3) + 1;
        for(int i = 0; i < n; i++) {
            mpp[nums[i]]++;
            if(mpp[nums[i]] == mini) ls.push_back(nums[i]);
            if(ls.size() == 2) break;
        }
        return ls;
    }
};

TC - O(n) + O(nlogn)
SC - O(n)

OPTIMAL
	- Moore's vooting algorithm
	- since we have to return two elements, we'll take cnt1, cnt2, el1, el2
	- we first iterate and check if cnt1 and cn2 0 or no, yes, then we initialize cnt1, cnt2 and el1, el2.
	- same logic - we go through also, we initialize cnt and el and it gets degraded if elements aage are not same
	- later we run a loop to chrck manually if el are elmenets from array or no
	
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int cnt1 = 0, cnt2 = 0;
        int el1 = INT_MIN, el2 = INT_MIN; 

        for(int i = 0; i < nums.size(); i++) {
            if(cnt1 == 0 && el2 != nums[i]) cnt1 = 1, el1 = nums[i];
            else if(cnt2 == 0 && el1 != nums[i]) cnt2 = 1, el2 = nums[i];

            else if(el1 == nums[i]) cnt1++;
            else if(el2 == nums[i]) cnt2++;

            else cnt1--, cnt2--;
        }
        vector<int> ls;
        cnt1 = 0, cnt2 = 0;
        for(int i = 0; i < nums.size(); i++) {
            if(el1 == nums[i]) cnt1++;
            if(el2 == nums[i]) cnt2++;
        }
        int mini = (int)(nums.size()/3) + 1;
        if(cnt1 >= mini) ls.push_back(el1);
        if(cnt2 >= mini) ls.push_back(el2);
        sort(ls.begin(), ls.begin());
        return ls;
    }
};
