BRUTE 

	- 2 for loops
	- one for index, one for element. compare.
	- first loop me we're taking index from 1 because, 1 se hi compare krna hai na! 1,2,3....n. that's why we take the index of i from 1.
	
vector<int> findMissingRepeatingNumbers(vector < int > a) {
    int n = a.size();
    int missing = -1;
    int repeating = -1;
    for(int i = 1; i <= n; i++) {
        int cnt = 0;
        for(int j = 0; j < n; j++) {
            if(a[j] == i) cnt++;
        }
        if(cnt == 2) repeating = i;
        else if(cnt == 0) missing = i;
        if(missing != -1 && repeating != -1) break;
    }
    return {repeating, missing};
}

TC - O(n^2)
SC - O(1)

BETTER

	- hashmap
	- compare with 1 index with hashmap.

vector<int> findMissingRepeatingNumbers(vector < int > a) {
    int n = a.size();
    int hash[n+1] = {0};
    for(int i = 0; i < n; i++) {
        hash[a[i]]++;
    }

    int repeating = -1, missing = -1;
    for(int i = 1; i <= n; i++) {
        if(hash[i] == 2) repeating = i;
        else if(hash[i] == 0) missing = i;
    }
    return {repeating, missing};
}

TC - O(2n)
SC - O(n)

OPTIMAL

XOR
DINT UNDERSTAND
