BRUTE -

	- two for loops
	- will keep a vis array with m size along with arr2. we keep vis array so that we know what is already in ans arr
	
#include <bits/stdc++.h> 
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m){
	vector<int> ans;
	int vis[m] = {0};
	for(int i = 0; i < n; i++) {
		for(int j = 0 ; j < m; j++) {
			if(arr1[i] == arr2[j] && vis[j] == 0) {
				ans.push_back(arr1[i]);
				vis[j] = 1;
				break;
			}
			if(arr2[j] > arr1[i]) break;
		}
	}
	return ans;
}

TC - O(n+m)
SC - O(m)

OPTIMAL - 

	- 2 pointers
	- 1 in arr1, 2nd in arr2. we compare and if found same, put it in ans arr and return else inc indexes accordingly

#include <bits/stdc++.h> 
vector<int> findArrayIntersection(vector<int> &arr1, int n, vector<int> &arr2, int m){
	int i = 0;
	int j = 0;
	vector<int> ans;
	while(i < n && j < m) {
		if(arr1[i] < arr2[j]) {
			i++;
		}
		else if(arr1[i] > arr2[j]) {
			j++;
		}
		else {
			ans.push_back(arr1[i]);
			i++, j++;
		}
	}
	return ans;
}

TC - O(n+m)
SC - O(1)

O(n+m) sc for returning if worst case taken. 
