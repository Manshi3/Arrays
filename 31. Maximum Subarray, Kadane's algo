BRUTE - 

	- multiple 3 nested loops
	- just iterate and check for maximum subarrays and return maxi cnt

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        int maxi = INT_MIN;
        for(int i = 0; i < n; i++) {
            for(int j = i; j < n; j++) {
                int sum = 0;
                for(int k = i; k < j; k++) {
                    sum += nums[k];
                }
                maxi = max(maxi, sum);
            }
        }
        return maxi;
    }
};

TC - O(n^3)
SC - O(1)

BETTER - 

	- same as before but only 2 loops
	
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();

        int maxi = INT_MIN;
        for(int i = 0; i < n; i++) {
            int sum = 0;
            for(int j = i; j < n; j++) {
                sum += nums[j];
            }
            maxi = max(maxi, sum);
        }
        return maxi;
    }
};

TC - O(n^2)
SC - O(1)

OPTIMAL - 

	- you'll move through the array, update sum and maxiand once the sum goes below 0, we neglect that, otherwise no.
	
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int n = nums.size();
        
        int sum = 0;
        int maxi = INT_MIN;
        for(int i = 0; i < n; i++) {
            sum += nums[i];
            maxi = max(maxi, sum);
            if(sum < 0) sum = 0;
        }
        return maxi;
    }
};

TC - O(n)
SC - O(1)
