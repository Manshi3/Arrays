Given an array of integers nums, find the next permutation of nums.

BRUTE - 

  - Recursion
  - we try to find all the ways by recursion. we find all the permutations by recursion, we do linear search to find the given array, we then return the next array of integers.

TC - O(n! * n)

BETTER - 

  - C++ STL

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        next_permutation(nums.begin(), nums.end());
    }
};

OPTIMAL - 

    - breakdown
    - we iterate through the array from back and check for dip. and then we put that index into somewhere and break.
    - if index is -1 after the loop still, that means if there is no dip, we simply reverse the whole array.
    - we itrrate through the array again to check for least larger number than the dip and then swap it.
    - we want the whole array numbers to be as nearer to the given array as possible. since the numbers after the dip is larger, we simply reverse them to get smaller array
    
    
  class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        int index = -1;
        for(int i = n-2; i >= 0; i--) {
            if(nums[i] < nums[i+1]) {
                index = i;
                break;
            }
        }
        for(int i = n-1; i >= index && index != -1; i--) {
            if(nums[i] > nums[index]) {
                swap(nums[i], nums[index]);
                break;
            }
        }
        reverse(nums.begin() + index + 1, nums.end());
    }
};

TC - O(3n)
SC - O(1)
    
    
